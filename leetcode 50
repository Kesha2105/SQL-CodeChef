leetcode sql 50 --> MS SQL SERVER

// select queries
1. select product_id from products where low_fats = 'Y' and recyclable = 'Y'
2. select name from customer where  referee_id!=2 or referee_id is null;
3. select name , population , area from world where population >= 25000000 or area >= 3000000
4. select distinct(author_id) as id from views where author_id = viewer_id order by author_id
5. select tweet_id from tweets where len(content) > 15

// basic joins queries
1. select e.unique_id , em.name from employees em left join  employeeuni e on em.id = e.id
2. select p.product_name , s.year , s.price from sales s join product p on s.product_id = p.product_id
3. select v.customer_id , count(v.visit_id) as count_no_trans from visits v left join transactions t on v.visit_id = t.visit_id where t.transaction_id is null group by v.customer_id
4. select w1.id from weather w1 join weather w2 on W1.recordDate = DATEADD(day, 1, W2.recordDate) where w1.temperature > w2.temperature
5. select a1.machine_id
, ROUND(AVG(a2.timestamp - a1.timestamp),3) as processing_time
from Activity a1
join Activity a2
on a1.process_id=a2.process_id
and a1.machine_id=a2.machine_id
and a1.timestamp<a2.timestamp
group by a1.machine_id;
6. select e.name , b.bonus from employee e left join bonus b on e.empId = b.empId where (bonus is null or b.bonus < 1000)
7. SELECT
    S.student_id
    ,S.student_name
    ,SU.subject_name
    ,COUNT(E.student_id) attended_exams
FROM Students S
CROSS JOIN Subjects SU
LEFT JOIN Examinations E
    ON S.student_id = E.student_id
    AND SU.subject_name = E.subject_name

GROUP BY S.student_id, S.student_name, SU.subject_name
ORDER BY S.student_id, S.student_name, SU.subject_name
8. SELECT E1.name
FROM Employee E1
JOIN (
    SELECT managerId, COUNT(*) AS directReports
    FROM Employee
    GROUP BY managerId
    HAVING COUNT(*) >= 5
) E2 ON E1.id = E2.managerId;
9. SELECT
    s.user_id,
    ROUND(
        AVG(
            CASE 
                WHEN c.action = 'confirmed' THEN 1.00
                ELSE 0
            END
        ),
        2
    ) confirmation_rate
FROM
    Signups s
LEFT JOIN
    Confirmations c
    ON
    s.user_id = c.user_id
GROUP BY
    s.user_id


// basic aggrigate  function
1. select * from cinema where id%2!=0 and description != 'boring' order by rating desc
2. SELECT 
    p.product_id,
    ROUND(
        ISNULL(SUM(us.units * p.price * 1.0) / NULLIF(SUM(us.units), 0), 0),
        2
    ) AS average_price
FROM 
    Prices p
LEFT JOIN 
    UnitsSold us 
    ON p.product_id = us.product_id
    AND us.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY 
    p.product_id;
